/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg3dr_gui;

import java.io.File;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.text.PlainDocument;
import pkg3dr_updatefw.UpdateFirmware;
import pkg3dr_serial.APSettings;
import pkg3dr_serial.SerialCom;

/**
 *
 * @author elc
 */
public class ResetSettingsGui extends javax.swing.JFrame {
    private static final String [] optionsMain = {"Serial (SSID & PSW)","WiFi (SSID & PSW)","Serial (IP,Port)", "WiFi (Baud)","Update Firmware"};
    // baud rates both Wi-Fi module and Mission Planner support
    private static final String [] baudList = {"57600", "9600", "19200", "38400", "115200", "921600"};
    private static final int OPT_SERIAL_SSID_PSW = 0;
    private static final int OPT_WIFI_SSID_PSW  =  1;
    private static final int OPT_SERIAL_IP_PORT =  2;
    private static final int OPT_WIFI_BAUD      =  3;
    private static final int OPT_UPDATE_FW      =  4;
    private static final int PROG_OPTIONS_COUNT =  3;
    private static String binPath;
 
    /**
     * Creates new form ResetSettings
     */
    public ResetSettingsGui() {
        initComponents();
        
        
        URL url = ResetSettingsGui.class.getResource("/3DR_logo.png"); 
        ImageIcon icon = new ImageIcon(url);
        icoLbl.setIcon(icon);

        this.setIconImage(icon.getImage());
        
        portListCmbBox.removeAllItems();
        String [] portList = SerialCom.getPorts();
        if(portList != null && portList.length > 0) {
            for(String item : portList) {
                portListCmbBox.addItem(item);
            }
        } else {
            portListCmbBox.addItem(" ");
        }
        progrCmbBox.removeAllItems();
        
        for(String item : optionsMain)
            progrCmbBox.addItem(item);
        
        binPath = new String();
        
        baudCmbBox.removeAllItems();
        for(String item :baudList) {
            baudCmbBox.addItem(item);
        }

        PlainDocument doc = (PlainDocument) portTxt.getDocument();
        doc.setDocumentFilter(new IntFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        portListCmbBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ssidTxt = new javax.swing.JTextField();
        pswField = new javax.swing.JPasswordField();
        confirmPswField = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        progrCmbBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        fileBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        portTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        baudCmbBox = new javax.swing.JComboBox();
        ipTxt = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        icoLbl = new javax.swing.JLabel();
        logLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Port:");

        portListCmbBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("SSID:");

        jLabel3.setText("Password:");

        jLabel4.setText("Confirm Password:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel5.setForeground(java.awt.Color.red);
        jLabel5.setText("8 characters minimum");

        jButton1.setText("Load");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        progrCmbBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        progrCmbBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                progrCmbBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText("Option:");

        fileBtn.setText("File");
        fileBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fileBtnMouseReleased(evt);
            }
        });

        jLabel8.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));
        jLabel8.setText("SSID & PSW");

        jLabel9.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));
        jLabel9.setText("IP & Port");

        jLabel10.setText("IP:");

        jLabel11.setText("Port:");

        jLabel12.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.disabledForeground"));
        jLabel12.setText("Baudrate");

        baudCmbBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(baudCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ssidTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                    .addComponent(pswField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                    .addComponent(confirmPswField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                                    .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ipTxt)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(42, 42, 42)
                                .addComponent(progrCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(portListCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addComponent(fileBtn)
                        .addGap(39, 39, 39))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel9))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(portListCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progrCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(fileBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(pswField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ssidTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)))
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(confirmPswField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(ipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(baudCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Reset Access Point Settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(icoLbl)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(logLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(icoLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logLbl)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileBtnMouseReleased
        JFileChooser fileChr = new JFileChooser();
        fileChr.setFileFilter(new FileExtensionFilter());
        int ret = fileChr.showOpenDialog(ResetSettingsGui.this);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileChr.getSelectedFile();
            binPath = file.getAbsolutePath();

            if( valFile(file.getAbsolutePath())) {
                binPath = file.getAbsolutePath();
                int idx = binPath.indexOf("0x");
                binPath = binPath.substring(0,idx);
                System.out.println("PH_:" + binPath + ".");
            }
            else {
                binPath = "";
                logLbl.setText("Select a binary file");
            }
        } else {
            System.out.println("Cancel select file");
            binPath = "";
        }
    }//GEN-LAST:event_fileBtnMouseReleased

    private void progrCmbBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_progrCmbBoxItemStateChanged
        String optSel = String.valueOf(progrCmbBox.getSelectedItem());
        System.out.println("SEL: " + optSel);

        if(optSel.equals(optionsMain[OPT_UPDATE_FW]) || optSel.equals(optionsMain[OPT_SERIAL_IP_PORT]) || optSel.equals(optionsMain[OPT_WIFI_BAUD])) {
            ssidTxt.setEnabled(false);
            pswField.setEnabled(false);
            confirmPswField.setEnabled(false);

            if(optSel.equals(optionsMain[OPT_UPDATE_FW])) {
                fileBtn.setEnabled(true);
                portListCmbBox.setEnabled(true);
                ipTxt.setEnabled(false);
                portTxt.setEnabled(false);
                baudCmbBox.setEnabled(false);
            }
            else if(optSel.equals(optionsMain[OPT_SERIAL_IP_PORT])){
                ipTxt.setEnabled(true);
                portListCmbBox.setEnabled(true);
                portTxt.setEnabled(true);
                fileBtn.setEnabled(false);
                baudCmbBox.setEnabled(false);
            }
            else {  //OPT_WIFI_BAUD
                ipTxt.setEnabled(true);
                portTxt.setEnabled(true);
                baudCmbBox.setEnabled(true);
                portListCmbBox.setEnabled(false);

            }
        }
        else {
            ssidTxt.setEnabled(true);
            pswField.setEnabled(true);
            confirmPswField.setEnabled(true);
            fileBtn.setEnabled(false);
            baudCmbBox.setEnabled(false);

            if(optSel.equals(optionsMain[OPT_SERIAL_SSID_PSW])) {
                portListCmbBox.setEnabled(true);
                ipTxt.setEnabled(false);
                portTxt.setEnabled(false);
            }
            else { // OPT_WIFI_SSID_PSW
                ipTxt.setEnabled(true);
                portTxt.setEnabled(true);
                portListCmbBox.setEnabled(false);
            }
        }
    }//GEN-LAST:event_progrCmbBoxItemStateChanged

    // load 
    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        String status = "";

        String name = new String();
        String psw1 = new String();
        String psw2 = new String();
        String optSel = String.valueOf(progrCmbBox.getSelectedItem());
        if(!optSel.equals(optionsMain[OPT_UPDATE_FW]) && !optSel.equals(optionsMain[OPT_SERIAL_IP_PORT]) && !optSel.equals(optionsMain[OPT_WIFI_BAUD])){
            if( ssidTxt.getText().length() < 4 ) {
                logLbl.setText("SSID has to be minimum 4 characters");
                return;
            }
            name = ssidTxt.getText();
            psw1 = new String(pswField.getPassword());
            psw2 = new String(confirmPswField.getPassword());

            if( psw1.length() < 8 ) {
                logLbl.setText("Password has to be minimum 8 characters");
                return;
            }

            if(!psw1.equals(psw2)) {
                logLbl.setText("Password doesn't match");
                return;
            }
        }
        if(optSel.equals(optionsMain[OPT_WIFI_SSID_PSW]) || optSel.equals(optionsMain[OPT_WIFI_BAUD]) || optSel.equals(optionsMain[OPT_SERIAL_IP_PORT])) {
            IPInputVerifier ipVerif = new IPInputVerifier();
            if( ipVerif.verify(ipTxt.getText()) == false ) {
                logLbl.setText("Invalid IP address");
                return;
            }
        }
        if(optSel.equals(optionsMain[OPT_WIFI_SSID_PSW])) {
            String ip = ipTxt.getText();
            String portS = portTxt.getText();
            int port = 0;
            if( portS != null && !portS.isEmpty())
            {
                try {
                    port = Integer.parseInt(portS);
                } catch (NumberFormatException e) {
                    status = "Invalid args";
                    
                }
            }
            else {
                status = "Invalid args";
                //JOptionPane.showMessageDialog(this, "Invalid args");
            }
                
            if(port > 0)    
                status = pkg3dr_socket.APSettings.update_SSIDPSW(ip, port, name, psw1);
            else
               status = "Invalid args"; 
        }
        else if(optSel.equals(optionsMain[OPT_SERIAL_SSID_PSW])){
            String port = String.valueOf(portListCmbBox.getSelectedItem());
            if(port.equals(" "))
            status = "No serial ports found";
            else {
                System.out.println("Com Port: " + port + ", SSID: " + name + ", PSW: " + psw1);
                status = APSettings.updateSSID_PSW(port, name, psw1);
            }
        }
        else if(optSel.equals(optionsMain[OPT_UPDATE_FW])){
            String port = String.valueOf(portListCmbBox.getSelectedItem());
            if(port.equals(" "))
            status = "No serial ports found";
            else {
                if(binPath == null || binPath.isEmpty()) {
                    status = "No binary files selected";
                    System.out.println("No binary");
                }
                else {
                    status = UpdateFirmware.update(port, binPath); // disp baud fo
                    binPath = "";
                }
            }
        }
        else if(optSel.equals(optionsMain[OPT_SERIAL_IP_PORT])){
            String ip = ipTxt.getText();
            String port = portTxt.getText();

            String comPort = String.valueOf(portListCmbBox.getSelectedItem());
            if(port.equals(" "))
            status = "No serial ports found";
            else {
                status = APSettings.updateIP_Port(comPort, ip, port);
            }
        }
        else {  // OPT_WIFI_BAUD
            String baud = String.valueOf(baudCmbBox.getSelectedItem());
            String ip = ipTxt.getText();
            String portS = portTxt.getText();
            
            int port = 0;
            try {
                port = Integer.parseInt(portS);
            } catch (NumberFormatException e) {
                status = "Invalid args";
            }
            if(port > 0)
                status = pkg3dr_socket.APSettings.changeBaud(ip, port, baud);
            else
                status = "Invalid args";
        }
        logLbl.setText(status);

    }//GEN-LAST:event_jButton1MouseReleased

    
    private boolean valFile(String pth) {
        if(binPath.contains("0x00000.bin") || binPath.contains("0x40000.bin")) {
            return true;
        }
        return false;  
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResetSettingsGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResetSettingsGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResetSettingsGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResetSettingsGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResetSettingsGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox baudCmbBox;
    private javax.swing.JPasswordField confirmPswField;
    private javax.swing.JButton fileBtn;
    private javax.swing.JLabel icoLbl;
    private javax.swing.JFormattedTextField ipTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel logLbl;
    private javax.swing.JComboBox portListCmbBox;
    private javax.swing.JTextField portTxt;
    private javax.swing.JComboBox progrCmbBox;
    private javax.swing.JPasswordField pswField;
    private javax.swing.JTextField ssidTxt;
    // End of variables declaration//GEN-END:variables
}
